"""
List of types of vulnerabilities used for synthetic challenges.
To make it easier to grade the challenge, and since we inject the vulnerability ourselves, we can constrain the response vulnerability types to our list of potential vulnerabilities. 
"""
from enum import Enum
from typing import List, Optional


class VulnerabilityStatus(str, Enum):
    """Enum representing different statuses of vulnerabilities after they are detected.
    
    This enum inherits from str to make it JSON serializable and easier to work with
    in API responses while maintaining type safety.
    
    The status values are prefixed with numbers to enable natural sorting:
    - 10: Open (initial state)
    - 20: Acknowledged (reviewed but not fixed)
    - 30: Resolved (fixed)
    - 40: Invalid (false positive or not applicable)
    """
    
    OPEN = "10 open"
    ACKNOWLEDGED = "20 acknowledged"
    RESOLVED = "30 resolved"
    INVALID = "40 invalid"

    @classmethod
    def get_default_status(cls) -> 'VulnerabilityStatus':
        """Get the default status for a vulnerability.
        
        Returns:
            VulnerabilityStatus: The default status.
        """
        return cls.OPEN

    @property
    def sort_value(self) -> int:
        """Get the numeric sort value from the status string.
        
        Returns:
            int: The numeric prefix used for sorting (e.g. 10 for '10 open').
        """
        return int(self.value.split()[0])

    def __lt__(self, other: 'VulnerabilityStatus') -> bool:
        """Compare if this status should sort before another.
        
        Args:
            other (VulnerabilityStatus): Status to compare against.
            
        Returns:
            bool: True if this status sorts before the other.
        """
        if not isinstance(other, VulnerabilityStatus):
            return NotImplemented
        return self.sort_value < other.sort_value

    def __gt__(self, other: 'VulnerabilityStatus') -> bool:
        """Compare if this status should sort after another.
        
        Args:
            other (VulnerabilityStatus): Status to compare against.
            
        Returns:
            bool: True if this status sorts after the other.
        """
        if not isinstance(other, VulnerabilityStatus):
            return NotImplemented
        return self.sort_value > other.sort_value

    @classmethod
    def list(cls) -> List[str]:
        """Returns a list of all vulnerability type values.
        
        Returns:
            List[str]: List of all vulnerability type string values.
        """
        return [e.value for e in cls]

    @classmethod
    def from_string(cls, value: Optional[str]) -> Optional['VulnerabilityStatus']:
        """Safely converts a string to a VulnerabilityStatus.
        
        Args:
            value (Optional[str]): String value to convert, can be None.
            
        Returns:
            Optional[VulnerabilityStatus]: The corresponding VulnerabilityStatus or None if not found.
        """
        if value is None or not value:
            return None
            
        # Use a case-insensitive comparison to find the matching enum member.
        for member in cls:
            if member.value.lower() == value.lower():
                return member
        return None

    def __str__(self) -> str:
        """Returns the string value of the enum.
        
        Returns:
            str: The string value of the enum.
        """
        return self.value 