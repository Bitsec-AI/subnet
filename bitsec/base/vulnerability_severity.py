from enum import Enum
from typing import List, Optional


class VulnerabilitySeverity(str, Enum):
    """Enum representing different severity levels of vulnerabilities that can be detected. Used for real code and synthetic challenges.

    Including a numeric value for each severity level to make sorting easier.
    
    This enum inherits from str to make it JSON serializable and easier to work with
    in API responses while maintaining type safety.
    """
    CRITICAL = "99_critical"
    HIGH = "85_high"
    MEDIUM = "50_medium"
    LOW = "25_low"
    INFORMATIONAL = "10_informational"

    @classmethod
    def list(cls) -> List[str]:
        """Returns a list of all vulnerability severity values.
        
        Returns:
            List[str]: List of all vulnerability severity string values.
        """
        return [e.value for e in cls]

    @classmethod
    def from_string(cls, value: str) -> Optional['VulnerabilitySeverity']:
        """Safely converts a string to a VulnerabilitySeverity.
        
        Args:
            value (str): String value to convert.
            
        Returns:
            Optional[VulnerabilitySeverity]: The corresponding VulnerabilitySeverity or None if not found.
        """
        try:
            return cls(value.lower())
        except ValueError:
            return None

    def __str__(self) -> str:
        """Returns the string value of the enum.
        
        Returns:
            str: The string value of the enum.
        """
        return self.value 

    def numeric_value(self) -> int:
        """Extracts the numeric value from the enum value.
        
        Returns:
            int: The numeric part of the enum value.
        """
        return int(self.value.split("_")[0])