"""
List of types of vulnerabilities used for synthetic challenges.
To make it easier to grade the challenge, and since we inject the vulnerability ourselves, we can constrain the response vulnerability types to our list of potential vulnerabilities. 
"""
from enum import Enum
from typing import List, Optional


class VulnerabilityCategory(str, Enum):
    """Enum representing different types of vulnerabilities that can be detected.
    
    This enum inherits from str to make it JSON serializable and easier to work with
    in API responses while maintaining type safety.
    """
    
    # Access Control
    WEAK_ACCESS_CONTROL = "Weak Access Control"
    
    # Authentication & Authorization
    GOVERNANCE_ATTACKS = "Governance Attacks"
    
    # Smart Contract Specific
    REENTRANCY = "Reentrancy"
    FRONT_RUNNING = "Frontrunning"
    ARITHMETIC_OVERFLOW_AND_UNDERFLOW = "Arithmetic Overflow and Underflow Vulnerability"
    SELF_DESTRUCT = "Self Destruct"
    UNINITIALIZED_PROXY = "Uninitialized Proxy"
    
    # Logic Issues
    INCORRECT_CALCULATION = "Incorrect Calculation"
    ROUNDING_ERROR = "Rounding Error"
    
    # Data Validation
    IMPROPER_INPUT_VALIDATION = "Improper Input Validation"
    
    # Cryptographic Issues
    BAD_RANDOMNESS = "Bad Randomness Vulnerability"
    REPLAY_SIGNATURE_MALLEABILITY = "Replay Attacks/Signature Malleability"
    
    # Oracle Issues
    ORACLE_PRICE_MANIPULATION = "Oracle/Price Manipulation"



    @classmethod
    def list(cls) -> List[str]:
        """Returns a list of all vulnerability type values.
        
        Returns:
            List[str]: List of all vulnerability type string values.
        """
        return [e.value for e in cls]

    @classmethod
    def from_string(cls, value: str) -> Optional['VulnerabilityCategory']:
        """Safely converts a string to a VulnerabilityCategory.
        
        Args:
            value (str): String value to convert.
            
        Returns:
            Optional[VulnerabilityCategory]: The corresponding VulnerabilityCategory or None if not found.
        """
        # Use a case-insensitive comparison to find the matching enum member.
        for member in cls:
            if member.value.lower() == value.lower():
                return member
        return None

    def __str__(self) -> str:
        """Returns the string value of the enum.
        
        Returns:
            str: The string value of the enum.
        """
        return self.value 