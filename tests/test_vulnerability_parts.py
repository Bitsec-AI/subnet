import os
import json
import numpy as np
import bittensor as bt
from rich.console import Console
from rich.table import Table
from bitsec.protocol import PredictionResponse, Vulnerability, LineRange
from bitsec.base.vulnerability_category import VulnerabilityCategory
from bitsec.base.vulnerability_risk_level import VulnerabilityRiskLevel

SPEND_MONEY = os.environ.get("SPEND_MONEY", True)
if SPEND_MONEY:
    bt.logging.set_debug()


# Create some vulnerabilities, **purposefully** not sorted by risk level, line range, category, or description.
vuln_high1 = Vulnerability(category=VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW, line_ranges=[LineRange(start=2, end=9)], description="Can lead to loss of funds", risk=VulnerabilityRiskLevel.HIGH)
vuln_critical1 = Vulnerability(category=VulnerabilityCategory.WEAK_ACCESS_CONTROL, line_ranges=[LineRange(start=2, end=20)], description="Allows unauthorized access to sensitive data", risk=VulnerabilityRiskLevel.CRITICAL)
vuln_medium1 = Vulnerability(category=VulnerabilityCategory.REENTRANCY, line_ranges=[LineRange(start=12, end=30)], description="Can lead to loss of funds", risk=VulnerabilityRiskLevel.MEDIUM)
vuln_low = Vulnerability(category=VulnerabilityCategory.INCORRECT_CALCULATION, line_ranges=[LineRange(start=30, end=40)], description="Allows unauthorized access to terminate the contract", risk=VulnerabilityRiskLevel.LOW)
vuln_informational = Vulnerability(category=VulnerabilityCategory.BAD_RANDOMNESS, line_ranges=[LineRange(start=30, end=40)], description="Allows unauthorized access to terminate the contract", risk=VulnerabilityRiskLevel.INFORMATIONAL)

vuln_high2 = Vulnerability(category=VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW, line_ranges=[LineRange(start=1, end=9)], description="Gives the attacker more funds than they should have", risk=VulnerabilityRiskLevel.HIGH)
vuln_medium2 = Vulnerability(category=VulnerabilityCategory.FRONT_RUNNING, line_ranges=[LineRange(start=30, end=40)], description="Allows unauthorized access to terminate the contract", risk=VulnerabilityRiskLevel.MEDIUM)
vuln_critical2 = Vulnerability(category=VulnerabilityCategory.WEAK_ACCESS_CONTROL, line_ranges=[LineRange(start=1, end=20)], description="Allows unauthorized access to sensitive data", risk=VulnerabilityRiskLevel.CRITICAL)

prediction_response = PredictionResponse(prediction=True, vulnerabilities=[vuln_high1, vuln_critical1, vuln_medium1, vuln_low, vuln_informational, vuln_high2, vuln_medium2, vuln_critical2])


def test_sort_vulnerabilities():
    prediction_response.sort_vulnerabilities()
    expected = [vuln_critical2, vuln_critical1, vuln_high2, vuln_high1, vuln_medium1, vuln_medium2, vuln_low, vuln_informational]

    console = Console()
    table = Table(title="Sorted Vulnerabilities")
    table.add_column("Index")
    table.add_column("Sorted Risk", style="bold blue")
    table.add_column("Category", style="bold yellow")
    table.add_column("Output Risk", style="bold red")
    table.add_column("Category", style="bold green")

    for i in range(len(prediction_response.vulnerabilities)):
        table.add_row(f"{i}", expected[i].risk, expected[i].category, prediction_response.vulnerabilities[i].risk, prediction_response.vulnerabilities[i].category)

    console.print(table)

    assert prediction_response.vulnerabilities == expected

def test_load_cat_from_string():
    assert VulnerabilityCategory.from_string("Arithmetic Overflow and Underflow Vulnerability") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW
    assert VulnerabilityCategory.from_string("arithmetic overflow and underflow vulnerability") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW
    assert VulnerabilityCategory.from_string("ARITHMETIC OVERFLOW AND UNDERFLOW VULNERABILITY") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW

    assert VulnerabilityCategory.from_string("Weak Access Control") == VulnerabilityCategory.WEAK_ACCESS_CONTROL
    assert VulnerabilityCategory.from_string("Reentrancy") == VulnerabilityCategory.REENTRANCY
    assert VulnerabilityCategory.from_string("Incorrect Calculation") == VulnerabilityCategory.INCORRECT_CALCULATION
    assert VulnerabilityCategory.from_string("Bad Randomness Vulnerability") == VulnerabilityCategory.BAD_RANDOMNESS
    assert VulnerabilityCategory.from_string("FrontRunning") == VulnerabilityCategory.FRONT_RUNNING

def test_load_risk_from_string():
    assert VulnerabilityRiskLevel.from_string("99_critical") == VulnerabilityRiskLevel.CRITICAL
    assert VulnerabilityRiskLevel.from_string("85_high") == VulnerabilityRiskLevel.HIGH
    assert VulnerabilityRiskLevel.from_string("50_medium") == VulnerabilityRiskLevel.MEDIUM
    assert VulnerabilityRiskLevel.from_string("25_low") == VulnerabilityRiskLevel.LOW
    assert VulnerabilityRiskLevel.from_string("10_informational") == VulnerabilityRiskLevel.INFORMATIONAL

def test_vulnerability_to_dict():
    assert vuln_high1.model_dump() == {
        "category": "arithmetic overflow and underflow vulnerability",
        "line_ranges": [{"start": 2, "end": 9}],
        "description": "Can lead to loss of funds",
        "risk": "85_high"
    }

def test_vulnerability_from_json():
    vuln = Vulnerability.model_validate_json(vuln_high1.model_dump_json())
    assert vuln == vuln_high1


# TODO: Fix these tests

# def test_vulnerability_from_dict():
#     vuln = Vulnerability.model_validate_json(vuln_high1.model_dump())
#     assert vuln == vuln_high1

# def test_vulnerability_to_json():
#     assert vuln_high1.model_dump_json() == json.dumps(vuln_high1.model_dump())
