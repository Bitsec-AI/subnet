import os
import json
import numpy as np
import bittensor as bt
from rich.console import Console
from rich.table import Table
from bitsec.protocol import PredictionResponse, Vulnerability, LineRange
from bitsec.base.vulnerability_category import VulnerabilityCategory
from bitsec.base.vulnerability_severity import VulnerabilitySeverity

SPEND_MONEY = os.environ.get("SPEND_MONEY", True)
if SPEND_MONEY:
    bt.logging.set_debug()


# Create some vulnerabilities, **purposefully** not sorted by severity, line range, category, or description.
vuln_high1 = Vulnerability(
    title="Arithmetic Overflow in Balance Calculation",
    category=VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW,
    line_ranges=[LineRange(start=2, end=9)],
    description="Can lead to loss of funds",
    severity=VulnerabilitySeverity.HIGH,
    vulnerable_code="[Placeholder] Vulnerable arithmetic overflow code",
    code_to_exploit="[Placeholder] Code to exploit arithmetic overflow",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed arithmetic overflow code"
)

vuln_critical1 = Vulnerability(
    title="Missing Access Control in Admin Function",
    category=VulnerabilityCategory.WEAK_ACCESS_CONTROL,
    line_ranges=[LineRange(start=2, end=20)],
    description="Allows unauthorized access to sensitive data",
    severity=VulnerabilitySeverity.CRITICAL,
    vulnerable_code="[Placeholder] Vulnerable access control code",
    code_to_exploit="[Placeholder] Code to exploit access control",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed access control code"
)

vuln_medium1 = Vulnerability(
    title="Reentrancy in Withdrawal Function",
    category=VulnerabilityCategory.REENTRANCY,
    line_ranges=[LineRange(start=12, end=30)],
    description="Can lead to loss of funds",
    severity=VulnerabilitySeverity.MEDIUM,
    vulnerable_code="[Placeholder] Vulnerable reentrancy code",
    code_to_exploit="[Placeholder] Code to exploit reentrancy",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed reentrancy code"
)

vuln_low = Vulnerability(
    title="Incorrect Fee Calculation",
    category=VulnerabilityCategory.INCORRECT_CALCULATION,
    line_ranges=[LineRange(start=30, end=40)],
    description="Allows unauthorized access to terminate the contract",
    severity=VulnerabilitySeverity.LOW,
    vulnerable_code="[Placeholder] Vulnerable calculation code",
    code_to_exploit="[Placeholder] Code to exploit calculation",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed calculation code"
)

vuln_informational = Vulnerability(
    title="Weak Random Number Generation",
    category=VulnerabilityCategory.BAD_RANDOMNESS,
    line_ranges=[LineRange(start=30, end=40)],
    description="Allows unauthorized access to terminate the contract",
    severity=VulnerabilitySeverity.INFORMATIONAL,
    vulnerable_code="[Placeholder] Vulnerable randomness code",
    code_to_exploit="[Placeholder] Code to exploit randomness",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed randomness code"
)

vuln_high2 = Vulnerability(
    title="Integer Overflow in Token Transfer",
    category=VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW,
    line_ranges=[LineRange(start=1, end=9)],
    description="Gives the attacker more funds than they should have",
    severity=VulnerabilitySeverity.HIGH,
    vulnerable_code="[Placeholder] Vulnerable overflow code",
    code_to_exploit="[Placeholder] Code to exploit overflow",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed overflow code"
)

vuln_medium2 = Vulnerability(
    title="Front-Running in Order Execution",
    category=VulnerabilityCategory.FRONT_RUNNING,
    line_ranges=[LineRange(start=30, end=40)],
    description="Allows unauthorized access to terminate the contract",
    severity=VulnerabilitySeverity.MEDIUM,
    vulnerable_code="[Placeholder] Vulnerable front-running code",
    code_to_exploit="[Placeholder] Code to exploit front-running",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed front-running code"
)

vuln_critical2 = Vulnerability(
    title="Unprotected Admin Function",
    category=VulnerabilityCategory.WEAK_ACCESS_CONTROL,
    line_ranges=[LineRange(start=1, end=20)],
    description="Allows unauthorized access to sensitive data",
    severity=VulnerabilitySeverity.CRITICAL,
    vulnerable_code="[Placeholder] Vulnerable admin access code",
    code_to_exploit="[Placeholder] Code to exploit admin access",
    rewritten_code_to_fix_vulnerability="[Placeholder] Fixed admin access code"
)

prediction_response = PredictionResponse(prediction=True, vulnerabilities=[vuln_high1, vuln_critical1, vuln_medium1, vuln_low, vuln_informational, vuln_high2, vuln_medium2, vuln_critical2])


def test_sort_vulnerabilities():
    prediction_response.sort_vulnerabilities()
    expected = [vuln_critical2, vuln_critical1, vuln_high2, vuln_high1, vuln_medium1, vuln_medium2, vuln_low, vuln_informational]

    console = Console()
    table = Table(title="Sorted Vulnerabilities")
    table.add_column("Index")
    table.add_column("Sorted Severity", style="bold blue")
    table.add_column("Category", style="bold yellow")
    table.add_column("Output Severity", style="bold red")
    table.add_column("Category", style="bold green")

    for i in range(len(prediction_response.vulnerabilities)):
        table.add_row(f"{i}", expected[i].severity, expected[i].category, prediction_response.vulnerabilities[i].severity, prediction_response.vulnerabilities[i].category)

    console.print(table)

    assert prediction_response.vulnerabilities == expected

def test_load_cat_from_string():
    assert VulnerabilityCategory.from_string("Arithmetic Overflow and Underflow Vulnerability") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW
    assert VulnerabilityCategory.from_string("arithmetic overflow and underflow vulnerability") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW
    assert VulnerabilityCategory.from_string("ARITHMETIC OVERFLOW AND UNDERFLOW VULNERABILITY") == VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW

    assert VulnerabilityCategory.from_string("Weak Access Control") == VulnerabilityCategory.WEAK_ACCESS_CONTROL
    assert VulnerabilityCategory.from_string("Reentrancy") == VulnerabilityCategory.REENTRANCY
    assert VulnerabilityCategory.from_string("Incorrect Calculation") == VulnerabilityCategory.INCORRECT_CALCULATION
    assert VulnerabilityCategory.from_string("Bad Randomness Vulnerability") == VulnerabilityCategory.BAD_RANDOMNESS
    assert VulnerabilityCategory.from_string("FrontRunning") == VulnerabilityCategory.FRONT_RUNNING

def test_load_severity_from_string():
    assert VulnerabilitySeverity.from_string("99_critical") == VulnerabilitySeverity.CRITICAL
    assert VulnerabilitySeverity.from_string("85_high") == VulnerabilitySeverity.HIGH
    assert VulnerabilitySeverity.from_string("50_medium") == VulnerabilitySeverity.MEDIUM
    assert VulnerabilitySeverity.from_string("25_low") == VulnerabilitySeverity.LOW
    assert VulnerabilitySeverity.from_string("10_informational") == VulnerabilitySeverity.INFORMATIONAL

def test_vulnerability_from_json():
    vuln = Vulnerability.model_validate_json(vuln_high1.model_dump_json())
    assert vuln == vuln_high1

# def test_vulnerability_to_dict():
#     assert vuln_high1.model_dump() == {
#         "title": "Arithmetic Overflow in Balance Calculation",
#         "category": "arithmetic overflow and underflow vulnerability",
#         "line_ranges": [{"start": 2, "end": 9}],
#         "description": "Can lead to loss of funds",
#         "severity": "85_high",
#         "vulnerable_code": "[Placeholder] Vulnerable arithmetic overflow code",
#         "code_to_exploit": "[Placeholder] Code to exploit arithmetic overflow",
#         "rewritten_code_to_fix_vulnerability": "[Placeholder] Fixed arithmetic overflow code"
#     }
