"""Tests for vulnerability status and related functionality."""
from typing import Tuple
import pytest
import json
from bitsec.base.vulnerability_category import VulnerabilityCategory
from bitsec.protocol import Vulnerability, VulnerabilityByMiner, LineRange, PredictionResponse

@pytest.fixture
def sample_vulnerability() -> Tuple[Vulnerability, str]:
    """Fixture providing a sample vulnerability for testing.
    
    Returns:
        Tuple[Vulnerability, str]: A tuple containing (vulnerability, json_string).
    """
    v = Vulnerability(
      category=VulnerabilityCategory.WEAK_ACCESS_CONTROL,
      title="Sensitive Data Exposure via Weak Access Control",
      severity="85_high",
      line_ranges=[LineRange(start=1, end=9)],
      description="Miners could report false hardware specifications to appear more capable than they actually are, potentially receiving more allocation requests and rewards.",
      vulnerable_code="error",
      code_to_exploit="""
      # Claims 8 GPUs with 80GB each when actually having only 2 GPUs with 10GB each
      def get_gpu_info():
      return {
        'count': 8,
        'capacity': 80000,
        'details': [{'name': 'NVIDIA A100-SXM4-80GB'} for _ in range(8)]
      }""",
      rewritten_code_to_fix_vulnerability="# Implement hardware verification checks and cross-reference reported specs with actual performance"
    )
    return v, v.model_dump_json()

def test_vulnerability_json_serialization(sample_vulnerability: Tuple[Vulnerability, str]) -> None:
    """Test that Vulnerability can be serialized to and from JSON."""
    vuln, json_str = sample_vulnerability
    
    # Test serialization
    serialized = vuln.model_dump_json()
    assert isinstance(serialized, str)
    
    # Test deserialization
    deserialized = Vulnerability.model_validate_json(json_str)
    assert isinstance(deserialized, Vulnerability)
    assert deserialized.category == vuln.category
    assert deserialized.description == vuln.description
    assert deserialized.vulnerable_code == vuln.vulnerable_code
    assert deserialized.code_to_exploit == vuln.code_to_exploit
    assert deserialized.rewritten_code_to_fix_vulnerability == vuln.rewritten_code_to_fix_vulnerability

def test_vulnerability_by_miner_creation(sample_vulnerability: Tuple[Vulnerability, str]) -> None:
    """Test VulnerabilityByMiner creation and inheritance."""
    vuln, _ = sample_vulnerability
    miner_id = "test_miner_1"
    
    # Create VulnerabilityByMiner from base Vulnerability fields
    vuln_by_miner = VulnerabilityByMiner(
        miner_id=miner_id,
        category=vuln.category,
        title=vuln.title,
        severity=vuln.severity,
        line_ranges=vuln.line_ranges,
        description=vuln.description,
        vulnerable_code=vuln.vulnerable_code,
        code_to_exploit=vuln.code_to_exploit,
        rewritten_code_to_fix_vulnerability=vuln.rewritten_code_to_fix_vulnerability
    )
    
    # Check inheritance of Vulnerability fields
    assert vuln_by_miner.category == vuln.category
    assert vuln_by_miner.line_ranges == vuln.line_ranges
    assert vuln_by_miner.description == vuln.description
    assert vuln_by_miner.vulnerable_code == vuln.vulnerable_code
    assert vuln_by_miner.code_to_exploit == vuln.code_to_exploit
    assert vuln_by_miner.rewritten_code_to_fix_vulnerability == vuln.rewritten_code_to_fix_vulnerability
    
    # Check VulnerabilityByMiner specific field
    assert vuln_by_miner.miner_id == miner_id

 
def test_vulnerability_by_miner_tuple_conversion(sample_vulnerability: Tuple[Vulnerability, str]) -> None:
    """Test that VulnerabilityByMiner can be converted to and from tuples."""
    vuln, _ = sample_vulnerability
    miner_id = "test_miner_1"
    
    # Test from_tuple
    vuln_by_miner = VulnerabilityByMiner.from_tuple((miner_id, vuln))
    assert isinstance(vuln_by_miner, VulnerabilityByMiner)
    assert vuln_by_miner.miner_id == miner_id
    assert vuln_by_miner.category == vuln.category
    assert vuln_by_miner.line_ranges == vuln.line_ranges
    
    # Test to_tuple
    miner_id_out, vuln_out = vuln_by_miner.to_tuple()
    assert miner_id_out == miner_id
    assert isinstance(vuln_out, Vulnerability)
    assert vuln_out.category == vuln.category
    assert vuln_out.line_ranges == vuln.line_ranges

def test_vulnerability_by_miner_json_conversion() -> None:
    """Test that VulnerabilityByMiner can be converted to and from JSON."""
    json_data = {
        "miner_id": "test_miner_1",
        "title": "Test title",
        "severity": "85_high",
        "category": VulnerabilityCategory.WEAK_ACCESS_CONTROL.value,
        "line_ranges": [{"start": 1, "end": 9}],
        "description": "Test description",
        "vulnerable_code": "vulnerable code",
        "code_to_exploit": "exploit code",
        "rewritten_code_to_fix_vulnerability": "fixed code"
    }
    
    # Test from_json with dict
    vuln_by_miner = VulnerabilityByMiner.from_json(json_data)
    assert isinstance(vuln_by_miner, VulnerabilityByMiner)
    assert vuln_by_miner.miner_id == "test_miner_1"
    assert vuln_by_miner.category == VulnerabilityCategory.WEAK_ACCESS_CONTROL
    
    # Test from_json with string
    vuln_by_miner = VulnerabilityByMiner.from_json(json.dumps(json_data))
    assert isinstance(vuln_by_miner, VulnerabilityByMiner)
    assert vuln_by_miner.miner_id == "test_miner_1"
    assert vuln_by_miner.category == VulnerabilityCategory.WEAK_ACCESS_CONTROL

def test_prediction_response_conversion() -> None:
    """Test PredictionResponse conversion methods."""
    vuln = Vulnerability(
        category=VulnerabilityCategory.ARITHMETIC_OVERFLOW_AND_UNDERFLOW,
        title="Arithmetic overflow",
        severity="50_medium",
        line_ranges=[LineRange(start=1, end=9)],
        description="Test description",
        vulnerable_code="vulnerable code",
        code_to_exploit="exploit code",
        rewritten_code_to_fix_vulnerability="fixed code"
    )
    
    # Test from_tuple
    pred_response = PredictionResponse.from_tuple((True, [vuln]))
    assert isinstance(pred_response, PredictionResponse)
    assert pred_response.prediction is True
    assert len(pred_response.vulnerabilities) == 1
    assert pred_response.vulnerabilities[0].category == vuln.category
    
    # Test to_tuple
    prediction, vulns = pred_response.to_tuple()
    assert prediction is True
    assert len(vulns) == 1
    assert vulns[0].category == vuln.category
    
    # Test from_json
    json_data = {
        "prediction": True,
        "vulnerabilities": [vuln.model_dump()]
    }
    pred_response = PredictionResponse.from_json(json_data)
    assert isinstance(pred_response, PredictionResponse)
    assert pred_response.prediction is True
    assert len(pred_response.vulnerabilities) == 1
    
    # Test from_json with string
    pred_response = PredictionResponse.from_json(json.dumps(json_data))
    assert isinstance(pred_response, PredictionResponse)
    assert pred_response.prediction is True
    assert len(pred_response.vulnerabilities) == 1
